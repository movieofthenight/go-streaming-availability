/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 58 countries!

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"fmt"
)

// StreamingType Type of the streaming option.
type StreamingType string

// List of streamingType
const (
	FREE StreamingType = "free"
	SUBSCRIPTION StreamingType = "subscription"
	BUY StreamingType = "buy"
	RENT StreamingType = "rent"
	ADDON StreamingType = "addon"
)

// All allowed values of StreamingType enum
var AllowedStreamingTypeEnumValues = []StreamingType{
	"free",
	"subscription",
	"buy",
	"rent",
	"addon",
}

func (v *StreamingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamingType(value)
	for _, existing := range AllowedStreamingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamingType", value)
}

// NewStreamingTypeFromValue returns a pointer to a valid StreamingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamingTypeFromValue(v string) (*StreamingType, error) {
	ev := StreamingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamingType: valid values are %v", v, AllowedStreamingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamingType) IsValid() bool {
	for _, existing := range AllowedStreamingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to streamingType value
func (v StreamingType) Ptr() *StreamingType {
	return &v
}

type NullableStreamingType struct {
	value *StreamingType
	isSet bool
}

func (v NullableStreamingType) Get() *StreamingType {
	return v.value
}

func (v *NullableStreamingType) Set(val *StreamingType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamingType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamingType(val *StreamingType) *NullableStreamingType {
	return &NullableStreamingType{value: val, isSet: true}
}

func (v NullableStreamingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

