/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 58 countries!

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
)

// checks if the CountriesResponseSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountriesResponseSchema{}

// CountriesResponseSchema struct for CountriesResponseSchema
type CountriesResponseSchema struct {
	// Map of country code to country details.
	Result map[string]Country `json:"result"`
}

// NewCountriesResponseSchema instantiates a new CountriesResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountriesResponseSchema(result map[string]Country) *CountriesResponseSchema {
	this := CountriesResponseSchema{}
	this.Result = result
	return &this
}

// NewCountriesResponseSchemaWithDefaults instantiates a new CountriesResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountriesResponseSchemaWithDefaults() *CountriesResponseSchema {
	this := CountriesResponseSchema{}
	return &this
}

// GetResult returns the Result field value
func (o *CountriesResponseSchema) GetResult() map[string]Country {
	if o == nil {
		var ret map[string]Country
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *CountriesResponseSchema) GetResultOk() (*map[string]Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *CountriesResponseSchema) SetResult(v map[string]Country) {
	o.Result = v
}

func (o CountriesResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountriesResponseSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

type NullableCountriesResponseSchema struct {
	value *CountriesResponseSchema
	isSet bool
}

func (v NullableCountriesResponseSchema) Get() *CountriesResponseSchema {
	return v.value
}

func (v *NullableCountriesResponseSchema) Set(val *CountriesResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCountriesResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCountriesResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountriesResponseSchema(val *CountriesResponseSchema) *NullableCountriesResponseSchema {
	return &NullableCountriesResponseSchema{value: val, isSet: true}
}

func (v NullableCountriesResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountriesResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


