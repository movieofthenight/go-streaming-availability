/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!

API version: 3.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
)

// checks if the ImageSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageSet{}

// ImageSet Image set of a service or an addon.
type ImageSet struct {
	// Link to the logo suitable for light themed background.
	LightThemeImage string `json:"lightThemeImage"`
	// Link to the logo suitable for dark themed background.
	DarkThemeImage string `json:"darkThemeImage"`
	// Link to the logo that is all white.
	WhiteImage string `json:"whiteImage"`
}

// NewImageSet instantiates a new ImageSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageSet(lightThemeImage string, darkThemeImage string, whiteImage string) *ImageSet {
	this := ImageSet{}
	this.LightThemeImage = lightThemeImage
	this.DarkThemeImage = darkThemeImage
	this.WhiteImage = whiteImage
	return &this
}

// NewImageSetWithDefaults instantiates a new ImageSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageSetWithDefaults() *ImageSet {
	this := ImageSet{}
	return &this
}

// GetLightThemeImage returns the LightThemeImage field value
func (o *ImageSet) GetLightThemeImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LightThemeImage
}

// GetLightThemeImageOk returns a tuple with the LightThemeImage field value
// and a boolean to check if the value has been set.
func (o *ImageSet) GetLightThemeImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LightThemeImage, true
}

// SetLightThemeImage sets field value
func (o *ImageSet) SetLightThemeImage(v string) {
	o.LightThemeImage = v
}

// GetDarkThemeImage returns the DarkThemeImage field value
func (o *ImageSet) GetDarkThemeImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DarkThemeImage
}

// GetDarkThemeImageOk returns a tuple with the DarkThemeImage field value
// and a boolean to check if the value has been set.
func (o *ImageSet) GetDarkThemeImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DarkThemeImage, true
}

// SetDarkThemeImage sets field value
func (o *ImageSet) SetDarkThemeImage(v string) {
	o.DarkThemeImage = v
}

// GetWhiteImage returns the WhiteImage field value
func (o *ImageSet) GetWhiteImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WhiteImage
}

// GetWhiteImageOk returns a tuple with the WhiteImage field value
// and a boolean to check if the value has been set.
func (o *ImageSet) GetWhiteImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WhiteImage, true
}

// SetWhiteImage sets field value
func (o *ImageSet) SetWhiteImage(v string) {
	o.WhiteImage = v
}

func (o ImageSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lightThemeImage"] = o.LightThemeImage
	toSerialize["darkThemeImage"] = o.DarkThemeImage
	toSerialize["whiteImage"] = o.WhiteImage
	return toSerialize, nil
}

type NullableImageSet struct {
	value *ImageSet
	isSet bool
}

func (v NullableImageSet) Get() *ImageSet {
	return v.value
}

func (v *NullableImageSet) Set(val *ImageSet) {
	v.value = val
	v.isSet = true
}

func (v NullableImageSet) IsSet() bool {
	return v.isSet
}

func (v *NullableImageSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageSet(val *ImageSet) *NullableImageSet {
	return &NullableImageSet{value: val, isSet: true}
}

func (v NullableImageSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


