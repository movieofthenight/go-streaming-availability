/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Episode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Episode{}

// Episode Details of an episode.
type Episode struct {
	// Type of the item. Always episode.
	ItemType string `json:"itemType"`
	// Title of the episode.
	Title string `json:"title"`
	// A brief overview of the plot of the episode.
	Overview *string `json:"overview,omitempty"`
	// The year that the episode aired.
	AirYear int32 `json:"airYear"`
	// Map of the streaming options by the country code.
	StreamingOptions map[string][]StreamingOption `json:"streamingOptions"`
}

type _Episode Episode

// NewEpisode instantiates a new Episode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpisode(itemType string, title string, airYear int32, streamingOptions map[string][]StreamingOption) *Episode {
	this := Episode{}
	this.ItemType = itemType
	this.Title = title
	this.AirYear = airYear
	this.StreamingOptions = streamingOptions
	return &this
}

// NewEpisodeWithDefaults instantiates a new Episode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpisodeWithDefaults() *Episode {
	this := Episode{}
	return &this
}

// GetItemType returns the ItemType field value
func (o *Episode) GetItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *Episode) GetItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *Episode) SetItemType(v string) {
	o.ItemType = v
}

// GetTitle returns the Title field value
func (o *Episode) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Episode) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Episode) SetTitle(v string) {
	o.Title = v
}

// GetOverview returns the Overview field value if set, zero value otherwise.
func (o *Episode) GetOverview() string {
	if o == nil || IsNil(o.Overview) {
		var ret string
		return ret
	}
	return *o.Overview
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Episode) GetOverviewOk() (*string, bool) {
	if o == nil || IsNil(o.Overview) {
		return nil, false
	}
	return o.Overview, true
}

// HasOverview returns a boolean if a field has been set.
func (o *Episode) HasOverview() bool {
	if o != nil && !IsNil(o.Overview) {
		return true
	}

	return false
}

// SetOverview gets a reference to the given string and assigns it to the Overview field.
func (o *Episode) SetOverview(v string) {
	o.Overview = &v
}

// GetAirYear returns the AirYear field value
func (o *Episode) GetAirYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AirYear
}

// GetAirYearOk returns a tuple with the AirYear field value
// and a boolean to check if the value has been set.
func (o *Episode) GetAirYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AirYear, true
}

// SetAirYear sets field value
func (o *Episode) SetAirYear(v int32) {
	o.AirYear = v
}

// GetStreamingOptions returns the StreamingOptions field value
func (o *Episode) GetStreamingOptions() map[string][]StreamingOption {
	if o == nil {
		var ret map[string][]StreamingOption
		return ret
	}

	return o.StreamingOptions
}

// GetStreamingOptionsOk returns a tuple with the StreamingOptions field value
// and a boolean to check if the value has been set.
func (o *Episode) GetStreamingOptionsOk() (map[string][]StreamingOption, bool) {
	if o == nil {
		return map[string][]StreamingOption{}, false
	}
	return o.StreamingOptions, true
}

// SetStreamingOptions sets field value
func (o *Episode) SetStreamingOptions(v map[string][]StreamingOption) {
	o.StreamingOptions = v
}

func (o Episode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Episode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["itemType"] = o.ItemType
	toSerialize["title"] = o.Title
	if !IsNil(o.Overview) {
		toSerialize["overview"] = o.Overview
	}
	toSerialize["airYear"] = o.AirYear
	toSerialize["streamingOptions"] = o.StreamingOptions
	return toSerialize, nil
}

func (o *Episode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemType",
		"title",
		"airYear",
		"streamingOptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEpisode := _Episode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEpisode)

	if err != nil {
		return err
	}

	*o = Episode(varEpisode)

	return err
}

type NullableEpisode struct {
	value *Episode
	isSet bool
}

func (v NullableEpisode) Get() *Episode {
	return v.value
}

func (v *NullableEpisode) Set(val *Episode) {
	v.value = val
	v.isSet = true
}

func (v NullableEpisode) IsSet() bool {
	return v.isSet
}

func (v *NullableEpisode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpisode(val *Episode) *NullableEpisode {
	return &NullableEpisode{value: val, isSet: true}
}

func (v NullableEpisode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpisode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


