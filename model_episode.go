/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!

API version: 3.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
)

// checks if the Episode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Episode{}

// Episode Details of an episode.
type Episode struct {
	// Type of the item. Always \"episode\".
	Type string `json:"type"`
	// Title of the episode.
	Title string `json:"title"`
	// The year that the movie was released.
	Year int32 `json:"year"`
	// Country to streaming availability info mapping of a show.
	StreamingInfo map[string][]StreamingOption `json:"streamingInfo"`
}

// NewEpisode instantiates a new Episode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpisode(type_ string, title string, year int32, streamingInfo map[string][]StreamingOption) *Episode {
	this := Episode{}
	this.Type = type_
	this.Title = title
	this.Year = year
	this.StreamingInfo = streamingInfo
	return &this
}

// NewEpisodeWithDefaults instantiates a new Episode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpisodeWithDefaults() *Episode {
	this := Episode{}
	return &this
}

// GetType returns the Type field value
func (o *Episode) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Episode) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Episode) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *Episode) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Episode) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Episode) SetTitle(v string) {
	o.Title = v
}

// GetYear returns the Year field value
func (o *Episode) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *Episode) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *Episode) SetYear(v int32) {
	o.Year = v
}

// GetStreamingInfo returns the StreamingInfo field value
func (o *Episode) GetStreamingInfo() map[string][]StreamingOption {
	if o == nil {
		var ret map[string][]StreamingOption
		return ret
	}

	return o.StreamingInfo
}

// GetStreamingInfoOk returns a tuple with the StreamingInfo field value
// and a boolean to check if the value has been set.
func (o *Episode) GetStreamingInfoOk() (*map[string][]StreamingOption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamingInfo, true
}

// SetStreamingInfo sets field value
func (o *Episode) SetStreamingInfo(v map[string][]StreamingOption) {
	o.StreamingInfo = v
}

func (o Episode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Episode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["title"] = o.Title
	toSerialize["year"] = o.Year
	toSerialize["streamingInfo"] = o.StreamingInfo
	return toSerialize, nil
}

type NullableEpisode struct {
	value *Episode
	isSet bool
}

func (v NullableEpisode) Get() *Episode {
	return v.value
}

func (v *NullableEpisode) Set(val *Episode) {
	v.value = val
	v.isSet = true
}

func (v NullableEpisode) IsSet() bool {
	return v.isSet
}

func (v *NullableEpisode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpisode(val *Episode) *NullableEpisode {
	return &NullableEpisode{value: val, isSet: true}
}

func (v NullableEpisode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpisode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


