/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Season type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Season{}

// Season Details of a season.
type Season struct {
	// Type of the item. Always `season`.
	ItemType string `json:"itemType"`
	// Title of the season.
	Title string `json:"title"`
	// The first year that the season aired.
	FirstAirYear int32 `json:"firstAirYear"`
	// The last year that the season aired.
	LastAirYear int32 `json:"lastAirYear"`
	// Map of the streaming options by the country code.
	StreamingOptions map[string][]StreamingOption `json:"streamingOptions"`
	// Array of the episodes belong to the season.
	Episodes []Episode `json:"episodes,omitempty"`
}

type _Season Season

// NewSeason instantiates a new Season object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeason(itemType string, title string, firstAirYear int32, lastAirYear int32, streamingOptions map[string][]StreamingOption) *Season {
	this := Season{}
	this.ItemType = itemType
	this.Title = title
	this.FirstAirYear = firstAirYear
	this.LastAirYear = lastAirYear
	this.StreamingOptions = streamingOptions
	return &this
}

// NewSeasonWithDefaults instantiates a new Season object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeasonWithDefaults() *Season {
	this := Season{}
	return &this
}

// GetItemType returns the ItemType field value
func (o *Season) GetItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *Season) GetItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *Season) SetItemType(v string) {
	o.ItemType = v
}

// GetTitle returns the Title field value
func (o *Season) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Season) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Season) SetTitle(v string) {
	o.Title = v
}

// GetFirstAirYear returns the FirstAirYear field value
func (o *Season) GetFirstAirYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FirstAirYear
}

// GetFirstAirYearOk returns a tuple with the FirstAirYear field value
// and a boolean to check if the value has been set.
func (o *Season) GetFirstAirYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstAirYear, true
}

// SetFirstAirYear sets field value
func (o *Season) SetFirstAirYear(v int32) {
	o.FirstAirYear = v
}

// GetLastAirYear returns the LastAirYear field value
func (o *Season) GetLastAirYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastAirYear
}

// GetLastAirYearOk returns a tuple with the LastAirYear field value
// and a boolean to check if the value has been set.
func (o *Season) GetLastAirYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastAirYear, true
}

// SetLastAirYear sets field value
func (o *Season) SetLastAirYear(v int32) {
	o.LastAirYear = v
}

// GetStreamingOptions returns the StreamingOptions field value
func (o *Season) GetStreamingOptions() map[string][]StreamingOption {
	if o == nil {
		var ret map[string][]StreamingOption
		return ret
	}

	return o.StreamingOptions
}

// GetStreamingOptionsOk returns a tuple with the StreamingOptions field value
// and a boolean to check if the value has been set.
func (o *Season) GetStreamingOptionsOk() (map[string][]StreamingOption, bool) {
	if o == nil {
		return map[string][]StreamingOption{}, false
	}
	return o.StreamingOptions, true
}

// SetStreamingOptions sets field value
func (o *Season) SetStreamingOptions(v map[string][]StreamingOption) {
	o.StreamingOptions = v
}

// GetEpisodes returns the Episodes field value if set, zero value otherwise.
func (o *Season) GetEpisodes() []Episode {
	if o == nil || IsNil(o.Episodes) {
		var ret []Episode
		return ret
	}
	return o.Episodes
}

// GetEpisodesOk returns a tuple with the Episodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Season) GetEpisodesOk() ([]Episode, bool) {
	if o == nil || IsNil(o.Episodes) {
		return nil, false
	}
	return o.Episodes, true
}

// HasEpisodes returns a boolean if a field has been set.
func (o *Season) HasEpisodes() bool {
	if o != nil && !IsNil(o.Episodes) {
		return true
	}

	return false
}

// SetEpisodes gets a reference to the given []Episode and assigns it to the Episodes field.
func (o *Season) SetEpisodes(v []Episode) {
	o.Episodes = v
}

func (o Season) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Season) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["itemType"] = o.ItemType
	toSerialize["title"] = o.Title
	toSerialize["firstAirYear"] = o.FirstAirYear
	toSerialize["lastAirYear"] = o.LastAirYear
	toSerialize["streamingOptions"] = o.StreamingOptions
	if !IsNil(o.Episodes) {
		toSerialize["episodes"] = o.Episodes
	}
	return toSerialize, nil
}

func (o *Season) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemType",
		"title",
		"firstAirYear",
		"lastAirYear",
		"streamingOptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSeason := _Season{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSeason)

	if err != nil {
		return err
	}

	*o = Season(varSeason)

	return err
}

type NullableSeason struct {
	value *Season
	isSet bool
}

func (v NullableSeason) Get() *Season {
	return v.value
}

func (v *NullableSeason) Set(val *Season) {
	v.value = val
	v.isSet = true
}

func (v NullableSeason) IsSet() bool {
	return v.isSet
}

func (v *NullableSeason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeason(val *Season) *NullableSeason {
	return &NullableSeason{value: val, isSet: true}
}

func (v NullableSeason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


