/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangesResult{}

// ChangesResult struct for ChangesResult
type ChangesResult struct {
	// Array of the changes.
	Changes []Change `json:"changes"`
	// Map of the shows by their ids.
	Shows map[string]Show `json:"shows"`
	// Whether there are more changes available.
	HasMore bool `json:"hasMore"`
	// Cursor value to pass to get the next set of changes.
	NextCursor *string `json:"nextCursor,omitempty"`
}

type _ChangesResult ChangesResult

// NewChangesResult instantiates a new ChangesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangesResult(changes []Change, shows map[string]Show, hasMore bool) *ChangesResult {
	this := ChangesResult{}
	this.Changes = changes
	this.Shows = shows
	this.HasMore = hasMore
	return &this
}

// NewChangesResultWithDefaults instantiates a new ChangesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangesResultWithDefaults() *ChangesResult {
	this := ChangesResult{}
	return &this
}

// GetChanges returns the Changes field value
func (o *ChangesResult) GetChanges() []Change {
	if o == nil {
		var ret []Change
		return ret
	}

	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value
// and a boolean to check if the value has been set.
func (o *ChangesResult) GetChangesOk() ([]Change, bool) {
	if o == nil {
		return nil, false
	}
	return o.Changes, true
}

// SetChanges sets field value
func (o *ChangesResult) SetChanges(v []Change) {
	o.Changes = v
}

// GetShows returns the Shows field value
func (o *ChangesResult) GetShows() map[string]Show {
	if o == nil {
		var ret map[string]Show
		return ret
	}

	return o.Shows
}

// GetShowsOk returns a tuple with the Shows field value
// and a boolean to check if the value has been set.
func (o *ChangesResult) GetShowsOk() (map[string]Show, bool) {
	if o == nil {
		return map[string]Show{}, false
	}
	return o.Shows, true
}

// SetShows sets field value
func (o *ChangesResult) SetShows(v map[string]Show) {
	o.Shows = v
}

// GetHasMore returns the HasMore field value
func (o *ChangesResult) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *ChangesResult) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *ChangesResult) SetHasMore(v bool) {
	o.HasMore = v
}

// GetNextCursor returns the NextCursor field value if set, zero value otherwise.
func (o *ChangesResult) GetNextCursor() string {
	if o == nil || IsNil(o.NextCursor) {
		var ret string
		return ret
	}
	return *o.NextCursor
}

// GetNextCursorOk returns a tuple with the NextCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangesResult) GetNextCursorOk() (*string, bool) {
	if o == nil || IsNil(o.NextCursor) {
		return nil, false
	}
	return o.NextCursor, true
}

// HasNextCursor returns a boolean if a field has been set.
func (o *ChangesResult) HasNextCursor() bool {
	if o != nil && !IsNil(o.NextCursor) {
		return true
	}

	return false
}

// SetNextCursor gets a reference to the given string and assigns it to the NextCursor field.
func (o *ChangesResult) SetNextCursor(v string) {
	o.NextCursor = &v
}

func (o ChangesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["changes"] = o.Changes
	toSerialize["shows"] = o.Shows
	toSerialize["hasMore"] = o.HasMore
	if !IsNil(o.NextCursor) {
		toSerialize["nextCursor"] = o.NextCursor
	}
	return toSerialize, nil
}

func (o *ChangesResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"changes",
		"shows",
		"hasMore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangesResult := _ChangesResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangesResult)

	if err != nil {
		return err
	}

	*o = ChangesResult(varChangesResult)

	return err
}

type NullableChangesResult struct {
	value *ChangesResult
	isSet bool
}

func (v NullableChangesResult) Get() *ChangesResult {
	return v.value
}

func (v *NullableChangesResult) Set(val *ChangesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableChangesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableChangesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangesResult(val *ChangesResult) *NullableChangesResult {
	return &NullableChangesResult{value: val, isSet: true}
}

func (v NullableChangesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


