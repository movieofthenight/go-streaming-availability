/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreamingOptionTypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamingOptionTypes{}

// StreamingOptionTypes Availability of the streaming option types in the service.
type StreamingOptionTypes struct {
	// Whether there are shows available via an addon/channel subscription.
	Addon bool `json:"addon"`
	// Whether there are shows available to buy.
	Buy bool `json:"buy"`
	// Whether there are shows available for rental.
	Rent bool `json:"rent"`
	// Whether there are free shows to watch.
	Free bool `json:"free"`
	// Whether there are shows available via a paid subscription plan.
	Subscription bool `json:"subscription"`
}

type _StreamingOptionTypes StreamingOptionTypes

// NewStreamingOptionTypes instantiates a new StreamingOptionTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamingOptionTypes(addon bool, buy bool, rent bool, free bool, subscription bool) *StreamingOptionTypes {
	this := StreamingOptionTypes{}
	this.Addon = addon
	this.Buy = buy
	this.Rent = rent
	this.Free = free
	this.Subscription = subscription
	return &this
}

// NewStreamingOptionTypesWithDefaults instantiates a new StreamingOptionTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamingOptionTypesWithDefaults() *StreamingOptionTypes {
	this := StreamingOptionTypes{}
	return &this
}

// GetAddon returns the Addon field value
func (o *StreamingOptionTypes) GetAddon() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Addon
}

// GetAddonOk returns a tuple with the Addon field value
// and a boolean to check if the value has been set.
func (o *StreamingOptionTypes) GetAddonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Addon, true
}

// SetAddon sets field value
func (o *StreamingOptionTypes) SetAddon(v bool) {
	o.Addon = v
}

// GetBuy returns the Buy field value
func (o *StreamingOptionTypes) GetBuy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Buy
}

// GetBuyOk returns a tuple with the Buy field value
// and a boolean to check if the value has been set.
func (o *StreamingOptionTypes) GetBuyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buy, true
}

// SetBuy sets field value
func (o *StreamingOptionTypes) SetBuy(v bool) {
	o.Buy = v
}

// GetRent returns the Rent field value
func (o *StreamingOptionTypes) GetRent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Rent
}

// GetRentOk returns a tuple with the Rent field value
// and a boolean to check if the value has been set.
func (o *StreamingOptionTypes) GetRentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rent, true
}

// SetRent sets field value
func (o *StreamingOptionTypes) SetRent(v bool) {
	o.Rent = v
}

// GetFree returns the Free field value
func (o *StreamingOptionTypes) GetFree() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Free
}

// GetFreeOk returns a tuple with the Free field value
// and a boolean to check if the value has been set.
func (o *StreamingOptionTypes) GetFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Free, true
}

// SetFree sets field value
func (o *StreamingOptionTypes) SetFree(v bool) {
	o.Free = v
}

// GetSubscription returns the Subscription field value
func (o *StreamingOptionTypes) GetSubscription() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *StreamingOptionTypes) GetSubscriptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *StreamingOptionTypes) SetSubscription(v bool) {
	o.Subscription = v
}

func (o StreamingOptionTypes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamingOptionTypes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addon"] = o.Addon
	toSerialize["buy"] = o.Buy
	toSerialize["rent"] = o.Rent
	toSerialize["free"] = o.Free
	toSerialize["subscription"] = o.Subscription
	return toSerialize, nil
}

func (o *StreamingOptionTypes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addon",
		"buy",
		"rent",
		"free",
		"subscription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamingOptionTypes := _StreamingOptionTypes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamingOptionTypes)

	if err != nil {
		return err
	}

	*o = StreamingOptionTypes(varStreamingOptionTypes)

	return err
}

type NullableStreamingOptionTypes struct {
	value *StreamingOptionTypes
	isSet bool
}

func (v NullableStreamingOptionTypes) Get() *StreamingOptionTypes {
	return v.value
}

func (v *NullableStreamingOptionTypes) Set(val *StreamingOptionTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamingOptionTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamingOptionTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamingOptionTypes(val *StreamingOptionTypes) *NullableStreamingOptionTypes {
	return &NullableStreamingOptionTypes{value: val, isSet: true}
}

func (v NullableStreamingOptionTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamingOptionTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


