/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceImageSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceImageSet{}

// ServiceImageSet Image set of a service or an addon.
type ServiceImageSet struct {
	// Link to the logo suitable for light themed background.
	LightThemeImage string `json:"lightThemeImage"`
	// Link to the logo suitable for dark themed background.
	DarkThemeImage string `json:"darkThemeImage"`
	// Link to the logo that is all white.
	WhiteImage string `json:"whiteImage"`
}

type _ServiceImageSet ServiceImageSet

// NewServiceImageSet instantiates a new ServiceImageSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceImageSet(lightThemeImage string, darkThemeImage string, whiteImage string) *ServiceImageSet {
	this := ServiceImageSet{}
	this.LightThemeImage = lightThemeImage
	this.DarkThemeImage = darkThemeImage
	this.WhiteImage = whiteImage
	return &this
}

// NewServiceImageSetWithDefaults instantiates a new ServiceImageSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceImageSetWithDefaults() *ServiceImageSet {
	this := ServiceImageSet{}
	return &this
}

// GetLightThemeImage returns the LightThemeImage field value
func (o *ServiceImageSet) GetLightThemeImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LightThemeImage
}

// GetLightThemeImageOk returns a tuple with the LightThemeImage field value
// and a boolean to check if the value has been set.
func (o *ServiceImageSet) GetLightThemeImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LightThemeImage, true
}

// SetLightThemeImage sets field value
func (o *ServiceImageSet) SetLightThemeImage(v string) {
	o.LightThemeImage = v
}

// GetDarkThemeImage returns the DarkThemeImage field value
func (o *ServiceImageSet) GetDarkThemeImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DarkThemeImage
}

// GetDarkThemeImageOk returns a tuple with the DarkThemeImage field value
// and a boolean to check if the value has been set.
func (o *ServiceImageSet) GetDarkThemeImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DarkThemeImage, true
}

// SetDarkThemeImage sets field value
func (o *ServiceImageSet) SetDarkThemeImage(v string) {
	o.DarkThemeImage = v
}

// GetWhiteImage returns the WhiteImage field value
func (o *ServiceImageSet) GetWhiteImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WhiteImage
}

// GetWhiteImageOk returns a tuple with the WhiteImage field value
// and a boolean to check if the value has been set.
func (o *ServiceImageSet) GetWhiteImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WhiteImage, true
}

// SetWhiteImage sets field value
func (o *ServiceImageSet) SetWhiteImage(v string) {
	o.WhiteImage = v
}

func (o ServiceImageSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceImageSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lightThemeImage"] = o.LightThemeImage
	toSerialize["darkThemeImage"] = o.DarkThemeImage
	toSerialize["whiteImage"] = o.WhiteImage
	return toSerialize, nil
}

func (o *ServiceImageSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lightThemeImage",
		"darkThemeImage",
		"whiteImage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceImageSet := _ServiceImageSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceImageSet)

	if err != nil {
		return err
	}

	*o = ServiceImageSet(varServiceImageSet)

	return err
}

type NullableServiceImageSet struct {
	value *ServiceImageSet
	isSet bool
}

func (v NullableServiceImageSet) Get() *ServiceImageSet {
	return v.value
}

func (v *NullableServiceImageSet) Set(val *ServiceImageSet) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceImageSet) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceImageSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceImageSet(val *ServiceImageSet) *NullableServiceImageSet {
	return &NullableServiceImageSet{value: val, isSet: true}
}

func (v NullableServiceImageSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceImageSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


