/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"fmt"
)

// StreamingOptionType Type of the streaming option.
type StreamingOptionType string

// List of streamingOptionType
const (
	FREE StreamingOptionType = "free"
	SUBSCRIPTION StreamingOptionType = "subscription"
	BUY StreamingOptionType = "buy"
	RENT StreamingOptionType = "rent"
	ADDON StreamingOptionType = "addon"
)

// All allowed values of StreamingOptionType enum
var AllowedStreamingOptionTypeEnumValues = []StreamingOptionType{
	"free",
	"subscription",
	"buy",
	"rent",
	"addon",
}

func (v *StreamingOptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamingOptionType(value)
	for _, existing := range AllowedStreamingOptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamingOptionType", value)
}

// NewStreamingOptionTypeFromValue returns a pointer to a valid StreamingOptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamingOptionTypeFromValue(v string) (*StreamingOptionType, error) {
	ev := StreamingOptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamingOptionType: valid values are %v", v, AllowedStreamingOptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamingOptionType) IsValid() bool {
	for _, existing := range AllowedStreamingOptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to streamingOptionType value
func (v StreamingOptionType) Ptr() *StreamingOptionType {
	return &v
}

type NullableStreamingOptionType struct {
	value *StreamingOptionType
	isSet bool
}

func (v NullableStreamingOptionType) Get() *StreamingOptionType {
	return v.value
}

func (v *NullableStreamingOptionType) Set(val *StreamingOptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamingOptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamingOptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamingOptionType(val *StreamingOptionType) *NullableStreamingOptionType {
	return &NullableStreamingOptionType{value: val, isSet: true}
}

func (v NullableStreamingOptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamingOptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

