/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 58 countries!

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
)

// checks if the Subtitle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subtitle{}

// Subtitle struct for Subtitle
type Subtitle struct {
	// Whether closed captions are available for the subtitle.
	ClosedCaptions *bool `json:"closedCaptions,omitempty"`
	Locale *Locale `json:"locale,omitempty"`
}

// NewSubtitle instantiates a new Subtitle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubtitle() *Subtitle {
	this := Subtitle{}
	return &this
}

// NewSubtitleWithDefaults instantiates a new Subtitle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubtitleWithDefaults() *Subtitle {
	this := Subtitle{}
	return &this
}

// GetClosedCaptions returns the ClosedCaptions field value if set, zero value otherwise.
func (o *Subtitle) GetClosedCaptions() bool {
	if o == nil || IsNil(o.ClosedCaptions) {
		var ret bool
		return ret
	}
	return *o.ClosedCaptions
}

// GetClosedCaptionsOk returns a tuple with the ClosedCaptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subtitle) GetClosedCaptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ClosedCaptions) {
		return nil, false
	}
	return o.ClosedCaptions, true
}

// HasClosedCaptions returns a boolean if a field has been set.
func (o *Subtitle) HasClosedCaptions() bool {
	if o != nil && !IsNil(o.ClosedCaptions) {
		return true
	}

	return false
}

// SetClosedCaptions gets a reference to the given bool and assigns it to the ClosedCaptions field.
func (o *Subtitle) SetClosedCaptions(v bool) {
	o.ClosedCaptions = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *Subtitle) GetLocale() Locale {
	if o == nil || IsNil(o.Locale) {
		var ret Locale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subtitle) GetLocaleOk() (*Locale, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *Subtitle) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given Locale and assigns it to the Locale field.
func (o *Subtitle) SetLocale(v Locale) {
	o.Locale = &v
}

func (o Subtitle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subtitle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClosedCaptions) {
		toSerialize["closedCaptions"] = o.ClosedCaptions
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	return toSerialize, nil
}

type NullableSubtitle struct {
	value *Subtitle
	isSet bool
}

func (v NullableSubtitle) Get() *Subtitle {
	return v.value
}

func (v *NullableSubtitle) Set(val *Subtitle) {
	v.value = val
	v.isSet = true
}

func (v NullableSubtitle) IsSet() bool {
	return v.isSet
}

func (v *NullableSubtitle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubtitle(val *Subtitle) *NullableSubtitle {
	return &NullableSubtitle{value: val, isSet: true}
}

func (v NullableSubtitle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubtitle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


