/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 60 countries!

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Subtitle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subtitle{}

// Subtitle struct for Subtitle
type Subtitle struct {
	// Whether closed captions are available for the subtitle.
	ClosedCaptions bool `json:"closedCaptions"`
	Locale Locale `json:"locale"`
}

type _Subtitle Subtitle

// NewSubtitle instantiates a new Subtitle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubtitle(closedCaptions bool, locale Locale) *Subtitle {
	this := Subtitle{}
	this.ClosedCaptions = closedCaptions
	this.Locale = locale
	return &this
}

// NewSubtitleWithDefaults instantiates a new Subtitle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubtitleWithDefaults() *Subtitle {
	this := Subtitle{}
	return &this
}

// GetClosedCaptions returns the ClosedCaptions field value
func (o *Subtitle) GetClosedCaptions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClosedCaptions
}

// GetClosedCaptionsOk returns a tuple with the ClosedCaptions field value
// and a boolean to check if the value has been set.
func (o *Subtitle) GetClosedCaptionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosedCaptions, true
}

// SetClosedCaptions sets field value
func (o *Subtitle) SetClosedCaptions(v bool) {
	o.ClosedCaptions = v
}

// GetLocale returns the Locale field value
func (o *Subtitle) GetLocale() Locale {
	if o == nil {
		var ret Locale
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *Subtitle) GetLocaleOk() (*Locale, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *Subtitle) SetLocale(v Locale) {
	o.Locale = v
}

func (o Subtitle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subtitle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["closedCaptions"] = o.ClosedCaptions
	toSerialize["locale"] = o.Locale
	return toSerialize, nil
}

func (o *Subtitle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"closedCaptions",
		"locale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubtitle := _Subtitle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubtitle)

	if err != nil {
		return err
	}

	*o = Subtitle(varSubtitle)

	return err
}

type NullableSubtitle struct {
	value *Subtitle
	isSet bool
}

func (v NullableSubtitle) Get() *Subtitle {
	return v.value
}

func (v *NullableSubtitle) Set(val *Subtitle) {
	v.value = val
	v.isSet = true
}

func (v NullableSubtitle) IsSet() bool {
	return v.isSet
}

func (v *NullableSubtitle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubtitle(val *Subtitle) *NullableSubtitle {
	return &NullableSubtitle{value: val, isSet: true}
}

func (v NullableSubtitle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubtitle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


