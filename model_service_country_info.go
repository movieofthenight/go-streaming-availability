/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 58 countries!

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
)

// checks if the ServiceCountryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceCountryInfo{}

// ServiceCountryInfo Details of a service in a country.
type ServiceCountryInfo struct {
	SupportedStreamingTypes SupportedStreamingTypes `json:"supportedStreamingTypes"`
	// Map of id to details of the addons supported by the service in this country.
	Addons map[string]Addon `json:"addons"`
}

// NewServiceCountryInfo instantiates a new ServiceCountryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceCountryInfo(supportedStreamingTypes SupportedStreamingTypes, addons map[string]Addon) *ServiceCountryInfo {
	this := ServiceCountryInfo{}
	this.SupportedStreamingTypes = supportedStreamingTypes
	this.Addons = addons
	return &this
}

// NewServiceCountryInfoWithDefaults instantiates a new ServiceCountryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceCountryInfoWithDefaults() *ServiceCountryInfo {
	this := ServiceCountryInfo{}
	return &this
}

// GetSupportedStreamingTypes returns the SupportedStreamingTypes field value
func (o *ServiceCountryInfo) GetSupportedStreamingTypes() SupportedStreamingTypes {
	if o == nil {
		var ret SupportedStreamingTypes
		return ret
	}

	return o.SupportedStreamingTypes
}

// GetSupportedStreamingTypesOk returns a tuple with the SupportedStreamingTypes field value
// and a boolean to check if the value has been set.
func (o *ServiceCountryInfo) GetSupportedStreamingTypesOk() (*SupportedStreamingTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportedStreamingTypes, true
}

// SetSupportedStreamingTypes sets field value
func (o *ServiceCountryInfo) SetSupportedStreamingTypes(v SupportedStreamingTypes) {
	o.SupportedStreamingTypes = v
}

// GetAddons returns the Addons field value
func (o *ServiceCountryInfo) GetAddons() map[string]Addon {
	if o == nil {
		var ret map[string]Addon
		return ret
	}

	return o.Addons
}

// GetAddonsOk returns a tuple with the Addons field value
// and a boolean to check if the value has been set.
func (o *ServiceCountryInfo) GetAddonsOk() (*map[string]Addon, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Addons, true
}

// SetAddons sets field value
func (o *ServiceCountryInfo) SetAddons(v map[string]Addon) {
	o.Addons = v
}

func (o ServiceCountryInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceCountryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supportedStreamingTypes"] = o.SupportedStreamingTypes
	toSerialize["addons"] = o.Addons
	return toSerialize, nil
}

type NullableServiceCountryInfo struct {
	value *ServiceCountryInfo
	isSet bool
}

func (v NullableServiceCountryInfo) Get() *ServiceCountryInfo {
	return v.value
}

func (v *NullableServiceCountryInfo) Set(val *ServiceCountryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceCountryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceCountryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceCountryInfo(val *ServiceCountryInfo) *NullableServiceCountryInfo {
	return &NullableServiceCountryInfo{value: val, isSet: true}
}

func (v NullableServiceCountryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceCountryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


