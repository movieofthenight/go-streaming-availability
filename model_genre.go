/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!

API version: 3.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
)

// checks if the Genre type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Genre{}

// Genre Details of a genre
type Genre struct {
	// Id of the genre
	Id int32 `json:"id"`
	// Name of the genre
	Name string `json:"name"`
}

// NewGenre instantiates a new Genre object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenre(id int32, name string) *Genre {
	this := Genre{}
	this.Id = id
	this.Name = name
	return &this
}

// NewGenreWithDefaults instantiates a new Genre object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenreWithDefaults() *Genre {
	this := Genre{}
	return &this
}

// GetId returns the Id field value
func (o *Genre) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Genre) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Genre) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Genre) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Genre) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Genre) SetName(v string) {
	o.Name = v
}

func (o Genre) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Genre) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableGenre struct {
	value *Genre
	isSet bool
}

func (v NullableGenre) Get() *Genre {
	return v.value
}

func (v *NullableGenre) Set(val *Genre) {
	v.value = val
	v.isSet = true
}

func (v NullableGenre) IsSet() bool {
	return v.isSet
}

func (v *NullableGenre) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenre(val *Genre) *NullableGenre {
	return &NullableGenre{value: val, isSet: true}
}

func (v NullableGenre) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenre) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


