/*
Streaming Availability API

Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"fmt"
)

// ChangeType Type of the change.
type ChangeType string

// List of changeType
const (
	NEW ChangeType = "new"
	REMOVED ChangeType = "removed"
	UPDATED ChangeType = "updated"
	EXPIRING ChangeType = "expiring"
	UPCOMING ChangeType = "upcoming"
)

// All allowed values of ChangeType enum
var AllowedChangeTypeEnumValues = []ChangeType{
	"new",
	"removed",
	"updated",
	"expiring",
	"upcoming",
}

func (v *ChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangeType(value)
	for _, existing := range AllowedChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChangeType", value)
}

// NewChangeTypeFromValue returns a pointer to a valid ChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChangeTypeFromValue(v string) (*ChangeType, error) {
	ev := ChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChangeType: valid values are %v", v, AllowedChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangeType) IsValid() bool {
	for _, existing := range AllowedChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to changeType value
func (v ChangeType) Ptr() *ChangeType {
	return &v
}

type NullableChangeType struct {
	value *ChangeType
	isSet bool
}

func (v NullableChangeType) Get() *ChangeType {
	return v.value
}

func (v *NullableChangeType) Set(val *ChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeType(val *ChangeType) *NullableChangeType {
	return &NullableChangeType{value: val, isSet: true}
}

func (v NullableChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

